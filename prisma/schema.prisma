generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  passwordHash  String
  role          Role      @default(USER)
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  verified      Boolean   @default(false)
  verifyToken   String?   @unique
  resetToken    String?   @unique
  resetExpires  DateTime?
  phoneNumber   String?
  socialLogins  SocialLogin[]
  profile       Profile?
  sessions      Session[]
  apiTokens     ApiToken[]
  auditLogs     AuditLog[]
  loginAttempts LoginAttempt[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  avatar      String?
  phoneNumber String?
  bio         String?
  birthDate   DateTime?
  address     String?
  city        String?
  country     String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("profiles")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  deviceInfo   String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model SocialLogin {
  id           String   @id @default(cuid())
  provider     String
  providerId   String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  accessToken  String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider, providerId])
  @@map("social_logins")
}

model ApiToken {
  id          String    @id @default(cuid())
  name        String
  token       String    @unique
  scopes      String[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("api_tokens")
}

model AuditLog {
  id        String    @id @default(cuid())
  action    String
  details   Json?
  ipAddress String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())

  @@map("audit_logs")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  success   Boolean
  ipAddress String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@map("login_attempts")
}

enum Role {
  ADMIN
  MODERATOR
  USER
  GUEST
}